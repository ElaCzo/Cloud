{"version":3,"sources":["Livres.js","App.js","serviceWorker.js","index.js"],"names":["Livres","props","tabTitres","livresRes","map","livre","cle","path","num","console","log","title","includes","titre","Card","Header","ListGroup","variant","Item","disabled","eventKey","App","submitQuery","event","preventDefault","books","sugg","fetch","proxyurl","state","value","then","res","json","result","setState","suggRes","this","error","submitQueryRegex","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","e","db","target","className","Container","Row","Col","Body","Title","Tabs","defaultActiveKey","id","Tab","Form","onSubmit","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","handleChange","autoComplete","Append","Button","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7d68af3.chunk.js","sourcesContent":["import ListGroup from 'react-bootstrap/ListGroup'\nimport Card from 'react-bootstrap/Card'\nimport React from 'react';\n\nconst Livres = (props) => {\n    let tabTitres = [];\n\n    tabTitres = props.livresRes.map(livre => {\n        let cle = livre.path + \"-\" + props.num;\n        console.log(cle);\n\n        if (livre.title.includes(\"/\") || livre.title.includes(\".txt\")) {\n            return [cle, \"Titre indisponible\"];\n        }\n        else {\n            return [cle, livre.title];\n        }\n    });\n\n    let titreCle = \"titre-\" + props.num;\n    let titre;\n    if ((props.num % 2) == 1) {\n        titre = \"Résultats de la recherche\";\n    }\n    else {\n        titre = \"Suggestions\";\n    }\n\n    return (\n        <Card>\n            <Card.Header> {titre} </Card.Header>\n            <ListGroup variant=\"flush\">\n                {tabTitres.map(livre => {\n                    return (\n                        <ListGroup.Item disabled eventKey={livre[0]}>{livre[1]}</ListGroup.Item>\n                    )\n                })}\n            </ListGroup>\n        </Card>\n    );\n}\nexport default Livres;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport Tabs from 'react-bootstrap/Tabs'\nimport Nav from 'react-bootstrap/Nav'\nimport Tab from 'react-bootstrap/Tab'\nimport Card from 'react-bootstrap/Card'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Container from 'react-bootstrap/Container'\nimport './App.css';\nimport Livres from './Livres.js';\nimport * as firebase from \"firebase/app\";\n\n// import handleQuery from './handleQuery.js';\n//import fetchResults from './handleQuery.js';\n\n// Add the Firebase services that you want to use\nimport \"firebase/firestore\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    var firebaseConfig = {\n      apiKey: \"AIzaSyB-OG_3lnqcdChpwD42uKvYWMHGZWlc4Ow\",\n      authDomain: \"daar-a1ea7.firebaseapp.com\",\n      databaseURL: \"https://daar-a1ea7.firebaseio.com\",\n      projectId: \"daar-a1ea7\",\n      storageBucket: \"daar-a1ea7.appspot.com\",\n      messagingSenderId: \"653755445186\",\n      appId: \"1:653755445186:web:be24541935e8161d02b05b\",\n      measurementId: \"G-BGZWWNYW0E\"\n    };\n    // Initialize Firebase\n    try {\n      firebase.initializeApp(firebaseConfig);\n      //firebase.analytics();\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.state = {\n      firebaseConfig: firebaseConfig,\n      db: firebase.firestore(),\n      livresRes: [],\n      suggRes: [],\n      value: \"\",\n    };\n  }\n\n  handleChange(event) {\n    console.log(this.state.value)\n    this.setState({ value: event.target.value })\n  }\n\n  /*submitQuery = (event) => {\n    event.preventDefault();\n    let livresResult = [];\n    let resultFromHandleQuery = handleQuery(this.state.value);\n    this.state.db.collection('livres').where(\"title\", \"==\", resultFromHandleQuery).get()\n    .then((querySnapshot)  => {\n      querySnapshot.forEach( (doc)  => {\n          livresResult.push(doc.data())\n      });\n      this.setState({\n        livresRes: livresResult\n      }, function () {\n        console.log(this.state.livresRes, \" App\");\n      })\n    }) \n  }*/\n\n  submitQuery = (event) => {\n    event.preventDefault();\n\n    let books = []\n    let sugg = []\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    fetch(proxyurl + \"https://mysterious-oasis-90910.herokuapp.com/searchbooks?search=\" + this.state.value)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          books = result.books;\n          sugg = result.sugg;\n\n          this.setState({\n            livresRes: books,\n            suggRes: sugg\n          }, function () {\n            console.log(this.state.livresRes, \" App\");\n            console.log(this.state.suggRes, \" App\");\n          })\n        },\n        // Remarque : il est important de traiter les erreurs ici\n        // au lieu d'utiliser un bloc catch(), pour ne pas passer à la trappe\n        // des exceptions provenant de réels bugs du composant.\n        (error) => { }\n      )\n  }\n\n  submitQueryRegex = (event) => {\n    event.preventDefault();\n\n    let books = []\n    let sugg = []\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    fetch(proxyurl + \"https://mysterious-oasis-90910.herokuapp.com/searchbooksregex?search=\" + this.state.value)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          books = result.books;\n          sugg = result.sugg;\n\n          this.setState({\n            livresRes: books,\n            suggRes: sugg\n          }, function () {\n            console.log(this.state.livresRes, \" App\");\n            console.log(this.state.suggRes, \" App\");\n          })\n        },\n        // Remarque : il est important de traiter les erreurs ici\n        // au lieu d'utiliser un bloc catch(), pour ne pas passer à la trappe\n        // des exceptions provenant de réels bugs du composant.\n        (error) => { }\n      )\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row>\n            <Col>\n              <Card>\n                <Card.Body>\n                  <Card.Title>Bibliothèque en ligne</Card.Title>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Tabs defaultActiveKey=\"recherche\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"recherche\" title=\"Recherche par mots-clés\">\n                  <Form onSubmit={(e) => this.submitQuery(e)}>\n                    <InputGroup className=\"mb-3\">\n                      <FormControl\n                        placeholder=\"Rechercher\"\n                        aria-label=\"Rechercher\"\n                        aria-describedby=\"basic-addon2\"\n                        onChange={(e) => this.handleChange(e)}\n                        value={this.state.value}\n                        id=\"rechercher\"\n                        autoComplete=\"off\"\n                      />\n                      <InputGroup.Append>\n                        <Button variant=\"outline-secondary\" type=\"submit\">OK</Button>\n                      </InputGroup.Append>\n                    </InputGroup>\n                  </Form>\n                  <Container>\n                    <Row>\n                      <Col>\n                        {<Livres livresRes={this.state.livresRes} num='1' />}\n                      </Col>\n                      <Col>\n                        {<Livres livresRes={this.state.suggRes} num=\"2\" />}\n                      </Col>\n                    </Row>\n                  </Container>\n                </Tab>\n                <Tab eventKey=\"regex\" title=\"Recherche par regex\">\n                  <Form onSubmit={(e) => this.submitQueryRegex(e)}>\n                    <InputGroup className=\"mb-3\">\n                      <FormControl\n                        placeholder=\"Rechercher\"\n                        aria-label=\"Rechercher\"\n                        aria-describedby=\"basic-addon2\"\n                        onChange={(e) => this.handleChange(e)}\n                        value={this.state.value}\n                        id=\"rechercher2\"\n                        autoComplete=\"off\"\n                      />\n                      <InputGroup.Append>\n                        <Button variant=\"outline-secondary\" type=\"submit\">OK</Button>\n                      </InputGroup.Append>\n                    </InputGroup>\n                  </Form>\n                  <Container>\n                    <Row>\n                      <Col>\n                        {<Livres livresRes={this.state.livresRes} num='3' />}\n                      </Col>\n                      <Col>\n                        {<Livres livresRes={this.state.suggRes} num=\"4\" />}\n                      </Col>\n                    </Row>\n                  </Container>\n                </Tab>\n              </Tabs>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}