{"version":3,"sources":["Livres.js","handleQuery.js","App.js","serviceWorker.js","index.js"],"names":["Livres","livresRes","className","map","livre","key","path","title","handleQuery","query","books","fetch","proxyurl","then","res","json","result","error","App","submitQuery","event","preventDefault","livresResult","state","value","setState","console","log","this","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","e","db","target","role","onSubmit","type","id","onChange","handleChange","autoComplete","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAaeA,G,MAXA,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACb,OACI,yBAAKC,UAAU,gBACVD,EAAUE,KAAI,SAAAC,GACX,OACA,yBAAKC,IAAKD,EAAME,MAAOF,EAAMG,a,OCuC9BC,EA9CK,SAACC,GACjB,IAAIC,EAAQ,GAcZ,OAZAC,MAAMC,mGAA0EH,GAC3EI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGN,EAAQM,EAAON,SAKnB,SAACO,OAGFP,GC8EIQ,G,kBAjFb,aAAe,IAAD,uBACZ,+CAkDFC,YAAc,SAACC,GACbA,EAAMC,iBACN,IAAIC,EAAed,EAAY,EAAKe,MAAMC,OAC1C,EAAKC,SAAS,CACVxB,UAAWqB,IACV,WACDI,QAAQC,IAAIC,KAAKL,MAAMtB,UAAW,YAtDtC,IAAI4B,EAAiB,CACnBC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBAGjB,IACEC,gBAAuBT,GACvBS,cACA,MAAOC,GACPb,QAAQC,IAAIY,GAlBF,OAqBZ,EAAKhB,MAAQ,CACXM,eAAgBA,EAChBW,GAAIF,cACJrC,UAAW,GACXuB,MAAO,IAzBG,E,0EA6BDJ,GACXM,QAAQC,IAAIC,KAAKL,MAAMC,OACvBI,KAAKH,SAAS,CAACD,MAAOJ,EAAMqB,OAAOjB,U,+BA+B3B,IAAD,OACP,OACE,yBAAKtB,UAAU,OACb,wDACA,0BAAMwC,KAAK,SAASC,SAAU,SAACJ,GAAD,OAAO,EAAKpB,YAAYoB,KACpD,2BACEK,KAAK,OACLrC,MAAM,6BACNsC,GAAG,aAAarB,MAAOI,KAAKL,MAAMC,MAClCsB,SAAU,SAACP,GAAD,OAAO,EAAKQ,aAAaR,IACnCS,aAAa,SAGhB,kBAAC,EAAD,CAAQ/C,UAAW2B,KAAKL,MAAMtB,iB,GA5ErBgD,IAAMC,YCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.952f118f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Livres = ({livresRes}) => {\n    return(\n        <div className=\"liste-livres\">\n            {livresRes.map(livre => {\n                return (\n                <div key={livre.path}>{livre.title}</div>\n                )\n            })}\n        </div>\n    );\n}\nexport default Livres;","const handleQuery = (query) => {\n    let books = []\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    fetch(proxyurl+\"https://cryptic-wave-17635.herokuapp.com/searchbooks?search=\" + query)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                books = result.books; // à vérifier selon le json reçu\n            },\n            // Remarque : il est important de traiter les erreurs ici\n            // au lieu d'utiliser un bloc catch(), pour ne pas passer à la trappe\n            // des exceptions provenant de réels bugs du composant.\n            (error) => {}\n        )\n\n    return books\n}\n\n/*render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n        return <div>Erreur : {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Chargement…</div>;\n    } else {\n        return (\n            <ul>\n                {items.map(item => (\n                    <li key={item.name}>\n                        {item.name} {item.price}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n}*/\n\n\n\n/*const handleQuery = (value) => {\n    //    var javaClass = java.type(\"HandlingOfRequest\")\n    //    return javaClass.handlingOfRequest(value)\n    //Packages.HandlingOfRequest.handlingOfRequest(value)\n    return value\n}*/\n\nexport default handleQuery;\n//export default fetchResults;","import React from 'react';\nimport './App.css';\nimport Livres from './Livres.js';\nimport * as firebase from \"firebase/app\";\n\nimport handleQuery from './handleQuery.js';\n//import fetchResults from './handleQuery.js';\n\n// Add the Firebase services that you want to use\nimport \"firebase/firestore\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    var firebaseConfig = {\n      apiKey: \"AIzaSyB-OG_3lnqcdChpwD42uKvYWMHGZWlc4Ow\",\n      authDomain: \"daar-a1ea7.firebaseapp.com\",\n      databaseURL: \"https://daar-a1ea7.firebaseio.com\",\n      projectId: \"daar-a1ea7\",\n      storageBucket: \"daar-a1ea7.appspot.com\",\n      messagingSenderId: \"653755445186\",\n      appId: \"1:653755445186:web:be24541935e8161d02b05b\",\n      measurementId: \"G-BGZWWNYW0E\"\n    };\n    // Initialize Firebase\n    try {\n      firebase.initializeApp(firebaseConfig);\n      firebase.analytics();\n    } catch (e) { \n      console.log(e);\n    }\n\n    this.state = {\n      firebaseConfig: firebaseConfig,\n      db: firebase.firestore(),\n      livresRes: [],\n      value: \"\",\n    };\n  }\n\n  handleChange(event) {\n    console.log(this.state.value)\n    this.setState({value: event.target.value})\n  }\n\n  /*submitQuery = (event) => {\n    event.preventDefault();\n    let livresResult = [];\n    let resultFromHandleQuery = handleQuery(this.state.value);\n    this.state.db.collection('livres').where(\"title\", \"==\", resultFromHandleQuery).get()\n    .then((querySnapshot)  => {\n      querySnapshot.forEach( (doc)  => {\n          livresResult.push(doc.data())\n      });\n      this.setState({\n        livresRes: livresResult\n      }, function () {\n        console.log(this.state.livresRes, \" App\");\n      })\n    }) \n  }*/\n\n  submitQuery = (event) => {\n    event.preventDefault();\n    let livresResult = handleQuery(this.state.value);\n    this.setState({\n        livresRes: livresResult\n      }, function () {\n        console.log(this.state.livresRes, \" App\");\n      }) \n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Bibliothèque en ligne</h1>\n        <form role=\"search\" onSubmit={(e) => this.submitQuery(e)}>\n          <input \n            type=\"text\" \n            title=\"Recherche par mots-clés\" \n            id=\"rechercher\" value={this.state.value} \n            onChange={(e) => this.handleChange(e)}\n            autoComplete=\"off\"\n          />\n        </form>\n        {<Livres livresRes={this.state.livresRes} /> }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}